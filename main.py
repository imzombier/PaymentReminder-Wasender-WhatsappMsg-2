import os
import pandas as pd
import re
import asyncio
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

# ---------------- CONFIG ----------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WASENDER_API_URL = os.getenv("WASENDER_API_URL", "https://wasenderapi.com/api/send-message")
WASENDER_API_KEY = os.getenv("WASENDER_API_KEY", "YOUR_WASENDER_API_KEY")
SAVE_PATH = "loan_data.xlsx"
PAYMENT_LINK = os.getenv("PAYMENT_LINK", "https://veritasfin.in/paynow/")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------- HELPERS ----------------
def clean_mobile(mobile):
    try:
        s = re.sub(r"\D", "", str(mobile))
        if s.startswith("91") and len(s) == 12:
            s = s[-10:]
        if len(s) == 10 and s[0] in "6789":
            return s
        return None
    except:
        return None

def to_float(x):
    try:
        if pd.isna(x):
            return 0.0
        return float(str(x).replace(",", "").strip())
    except:
        return 0.0

def build_msg(name, loan_no, advance, edi, overdue, payable, link):
    return (
        f"üëã ‡∞™‡±ç‡∞∞‡∞ø‡∞Ø‡∞Æ‡±à‡∞® {name} ‡∞ó‡∞æ‡∞∞‡±Å,\n"
        f"Veritas Finance Limited ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ç.\n\n"
        f"üí≥ ‡∞≤‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç: {loan_no}\n"
        f"üí∞ ‡∞Ö‡∞°‡±ç‡∞µ‡∞æ‡∞®‡±ç‡∞∏‡±ç‚Äå ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç = ‚Çπ{advance}\n"
        f"üìå ‡∞à‡∞°‡±Ä ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç = ‚Çπ{edi}\n"
        f"üî¥ ‡∞ì‡∞µ‡∞∞‡±ç‚Äå‡∞°‡±ç‡∞Ø‡±Ç = ‚Çπ{overdue}\n"
        f"‚úÖ ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞µ‡∞≤‡∞∏‡∞ø‡∞® ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç = ‚Çπ{payable}\n\n"
        f"‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.\n"
        f"üîó ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç: {link}{loan_no}"
    )

def send_whatsapp(phone, message):
    mobile = clean_mobile(phone)
    if not mobile:
        logging.warning(f"Invalid mobile: {phone}")
        return False
    payload = {"to": f"+91{mobile}", "text": message}
    headers = {"Authorization": f"Bearer {WASENDER_API_KEY}", "Content-Type": "application/json"}
    try:
        resp = requests.post(WASENDER_API_URL, json=payload, headers=headers)
        logging.info(f"Sent to {mobile}: {resp.status_code} | {resp.text}")
        return resp.status_code == 200
    except Exception as e:
        logging.error(f"Error sending to {mobile}: {e}")
        return False

# ---------------- EXCEL PROCESS ----------------
def process_excel(file_path):
    df = pd.read_excel(file_path, header=0)
    # Clean column names to remove non-breaking spaces
    df.columns = [c.replace("\xa0", " ").strip() for c in df.columns]
    for _, row in df.iterrows():
        loan_no = row.get("LOAN A/C NO")
        name = row.get("CUSTOMER NAME", "Customer")
        phone = row.get("MOBILE NO")
        edi = to_float(row.get("EDI AMOUNT"))
        overdue = to_float(row.get("OVER DUE"))
        advance = to_float(row.get("ADVANCE"))
        payable = edi + overdue - advance

        if payable <= 0:
            continue

        msg = build_msg(name, loan_no, advance, edi, overdue, payable, PAYMENT_LINK)
        send_whatsapp(phone, msg)
        asyncio.sleep(1)

# ---------------- TELEGRAM HANDLERS ----------------
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if document and document.file_name.endswith(('.xlsx', '.xls')):
        file = await context.bot.get_file(document.file_id)
        await file.download_to_drive(SAVE_PATH)
        await update.message.reply_text("üìÇ ‡∞´‡±à‡∞≤‡±ç ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞≤‡±Å ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ç...")
        process_excel(SAVE_PATH)
        await update.message.reply_text("‚úÖ ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡±Ü‡∞∏‡±á‡∞ú‡±ç‡∞≤‡±Å ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞®‡∞µ‡∞ø.")
    else:
        await update.message.reply_text("‚ùå ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø Excel ‡∞´‡±à‡∞≤‡±ç (.xlsx) ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üìÇ Excel ‡∞´‡±à‡∞≤‡±ç ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø", callback_data="upload"),
        InlineKeyboardButton("‚ÑπÔ∏è ‡∞¨‡±ã‡∞ü‡±ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø", callback_data="about")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä WhatsApp ‡∞∞‡∞ø‡∞Æ‡±à‡∞Ç‡∞°‡∞∞‡±ç ‡∞¨‡±ã‡∞ü‡±ç ‡∞®‡∞ø. ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞é‡∞Ç‡∞™‡∞ø‡∞ï‡∞≤‡∞§‡±ã ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø:",
        reply_markup=reply_markup
    )

# ---------------- RUN BOT ----------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    logging.info("ü§ñ Telegram WhatsApp Bot Running...")
    app.run_polling()
